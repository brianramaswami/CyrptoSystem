IP  =  (1, 5, 2, 0, 3, 7, 4, 6)
EP  =  (3, 0, 1, 2, 1, 2, 3, 0)
inverse_IP = (3, 0, 2, 4, 6, 1, 7, 5)
P10 = (2, 4, 1, 6, 3, 9, 0, 8, 7, 5)
P8 = (5, 2, 6, 3, 7, 4, 9, 8)
P4 = (1, 3, 2, 0)

S0 = [[1, 0, 3, 2],
           [ 3, 2, 1, 0],
           [ 0, 2, 1, 3],
           [3, 1, 3, 2]]

S1 = [[0, 1, 2, 3],
           [2, 0, 1, 3],
           [3, 0, 1, 0],
           [2, 1, 0, 3]]

key = '0000011111'

def left_shift(bits):
 return bits[:len(bits)/2]

def right_shift(bits):
 return bits[len(bits)/2:]

def permutate (original, fixed_key):
 perm_key = ''
 for i in original:
  perm_key += fixed_key[i-1]
 return perm_key

def key1():
 left_key = left();
 right_key = right();
 rotate_left = left_key[1:] + left_key[:1]
 rotate_right = right_key[1:] + right_key[:1]
 key_rotate = rotate_left + rotate_right
 return permutate(key_rotate, P8)

def key2():
 left_key = left();
 right_key = right();
 rotate_left = left_key[3:] + left_key[:3]
 rotate_right = right_key[3:] + right_key[:3]
 key_rotate = rotate_left + rotate_right
 return permutate(key_rotate, P8)

def in_sbox(bits, sbox):
 row = int(bits[0] + bits[3], 2)
 col = int(bits[1] + bits[2], 2)
 return bin(sbox[row][column])[2:].zfill(4)

def xor(bits, key):
 new = ''
 for bit, ket_bit in zip(bits, key):
  new += str(((int(bit) + int(key_bit)) % 2))
 return new

def func(bits, key):
 left = left()
 right = right()
 bits = permutate(right, EP)
 bits = xor(bits, key)
 bits = in_sbox(left, S0) + in_sbox(right, S1)
 bits = permutate(bits, P4)
 return xor(bits, left)

def encrypt(plain_txt):
 bits = permutate(plain_txt, IP)
 temp = func(bits, key1())
 bits = right_shift(bits) + temp
 bits = func(bits, key2())
 print permutate(bits + temp, inverse_IP)

def decrypt(cipher_txt):
 bits = permutate(cipher_txt, IP)
 temp = func(bits, key2())
 bits = right_shift(bits) + temp
 bits = func(bits, key1())
 print permutate(bits + temp, inverse_IP)

encrypt('01010101')
 
