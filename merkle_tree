from sage.crypto.util import ascii_integer

def myHash (fileName):
	return BinaryStrings().encoding(fileName)

def createLeaf(fileData):
	return myHash(fileData)

def createInner(leftData, rightData):
	leftHash = myHash(str(leftData))
	rightHash = myHash(str(rightData))
	return myHash(str(leftHash) + str(rightHash))

def createTree():
	leaf1 = createLeaf("1")
	leaf2 = createLeaf("2")
	leaf3 = createLeaf("3")
	leaf4 = createLeaf("4")
	inner1 = createInner(leaf1, leaf2)
	inner2 = createInner(leaf3, leaf4)
	root = createInner(inner1, inner2)
	return root

# Checks if file with fileName is in tree. If so, returns the position of the file,
# the hash of the sibling node, the hash of the other subtree, and the root node. If not,
# prints to screen and returns useless values
# (simulates the user asking the administrator if the file is in the system)
# Input: name of file to check if it's in the system
# Output: position of given file, hash of the sibling file, hash of the other subtree,
#  the root
def isFileInTree(fileName):
	position = "0"
	sibling = ""
	otherSubTree = ""
	if (fileName == "1"):
		position = "1"
		sibling = createLeaf("2")
		otherSubTree = createInner(createLeaf("3"), createLeaf("4"))
	elif (fileName == "2"):
		position = "2"
		sibling = createLeaf("1")
		otherSubTree = createInner(createLeaf("3"), createLeaf("4"))
	elif (fileName == "3"):
		position = "3"
		sibling = createLeaf("4")
		otherSubTree = createInner(createLeaf("1"), createLeaf("2"))
	elif (fileName == "4"):
		position = "4"
		sibling = createLeaf("3")
		otherSubTree = createInner(createLeaf("1"), createLeaf("2"))
	else:
		print "That file is not in the tree"
	root = createInner(createInner(createLeaf("1"), createLeaf("2")), createInner(createLeaf("3"), createLeaf("4")))
	return position, sibling, otherSubTree, root

# Given the fileName, position of the file, the hash of the sibling node, the hash of the
# other subtree, and the root node, builds a second "root" and compares it with the given
# root value. If they match, it returns True, else False
# (Simulating the user checking to make sure the information given is accurate)
# input: name of file, the four values output by the isFileInTree function (in order)
# output: True if roots match, False otherwise
def actuallyInTree(fileName, position, sibling, otherSubtree, root):
	if (position == "1"):
		checkRoot = createInner(createInner(createLeaf(fileName), sibling), otherSubTree)
	elif (position == "2"):
		checkRoot = createInner(createInner(sibling, createLeaf(fileName)), otherSubTree)
	elif (position == "3"):
		checkRoot = createInner(otherSubTree, createInner(createLeaf(fileName), sibling))
	else:
		checkRoot = createInner(otherSubTree, createInner(sibling, createLeaf(fileName)))
	if (root == checkRoot):
		return True
	return False
